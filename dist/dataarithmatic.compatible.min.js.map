{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase-Preinit.js","dataarithmatic.compatible.min.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","source/DataArithmatic-Browser-Shim.js","source/DataArithmatic.js"],"names":["f","exports","module","define","amd","window","global","self","this","DataArithmatic","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","constructor","pOptions","pServiceHash","fable","options","serviceType","UUID","Math","floor","random","Hash","static","connectFable","pFable","getUUID","CoreServiceProviderBase","libDataArithmatic","libFableServiceProviderBase","super","_Regex_formatterInsertCommas","_Regex_formatterAddCommasToNumber","_Regex_formatterDollarsRemoveCommas","_Regex_formatterCleanNonAlpha","_Value_MoneySign_Currency","_Value_NaN_Currency","_Value_GroupSeparator_Number","_Value_Prefix_StringHash","_Value_Clean_formatterCleanNonAlpha","_UseEngineStringStartsWith","String","prototype","startsWith","_UseEngineStringEndsWith","endsWith","stringReverse","pString","split","reverse","join","stringStartsWith","pSearchString","pStartIndex","stringStartsWith_Polyfill","slice","stringEndsWith","pEndIndex","stringEndsWith_Polyfill","substr","insecureStringHash","tmpHash","tmpStringLength","tmpCharacterIndex","charCodeAt","cleanEnclosureWrapCharacters","pWrapCharacter","substring","cleanNonAlphaCharacters","replace","formatterInsertCommas","tmpReversedWithCommas","match","processAddCommasToNumberRegex","pMatch","pSign","pZeros","pBefore","pDecimal","pAfter","formatterAddCommasToNumber","pNumber","toString","bind","formatterDollars","pValue","tmpDollarAmount","parseFloat","toFixed","isNaN","formatterRoundNumber","pDigits","tmpDigits","tmpValue","stringGeneratePaddingString","pTargetLength","pPadString","tmpTargetLength","tmpPadLength","repeat","stringPadStart","tmpString","stringPadEnd","stringBeforeMatch","stringAfterMatch","tmpStringSplitLocation","indexOf","stringCountEnclosures","pEnclosureStart","pEnclosureEnd","tmpEnclosureStart","tmpEnclosureEnd","tmpEnclosureCount","tmpEnclosureDepth","stringGetEnclosureValueByIndex","pEnclosureIndexToGet","tmpEnclosureIndexToGet","tmpMatchedEnclosureIndex","tmpEnclosedValueStartIndex","tmpEnclosedValueEndIndex","stringRemoveEnclosureByIndex","pEnclosureIndexToRemove","tmpEnclosureIndexToRemove","tmpEnclosureStartIndex","tmpEnclosureEndIndex","tmpReturnString"],"mappings":"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","file":"dataarithmatic.compatible.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Core Pre-initialization Service Base\n*\n* For a couple services, we need to be able to instantiate them before the Fable object is fully initialized.\n* This is a base class for those services.\n*\n* @license MIT\n* @author <steven@velozo.com>\n*/\n\nclass FableCoreServiceProviderBase\n{\n\tconstructor(pOptions, pServiceHash)\n\t{\n\t\tthis.fable = false;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n        this.serviceType = 'Unknown';\n\n\t\t// The hash will be a non-standard UUID ... the UUID service uses this base class!\n        this.UUID = `CORESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`;\n\n        this.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n\n    static isFableService = true;\n\n\t// After fable is initialized, it would be expected to be wired in as a normal service.\n\tconnectFable(pFable)\n\t{\n\t\tthis.fable = pFable;\n\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableCoreServiceProviderBase;\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.DataArithmatic = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Core Pre-initialization Service Base\n*\n* For a couple services, we need to be able to instantiate them before the Fable object is fully initialized.\n* This is a base class for those services.\n*\n* @license MIT\n* @author <steven@velozo.com>\n*/\n\nclass FableCoreServiceProviderBase\n{\n\tconstructor(pOptions, pServiceHash)\n\t{\n\t\tthis.fable = false;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n        this.serviceType = 'Unknown';\n\n\t\t// The hash will be a non-standard UUID ... the UUID service uses this base class!\n        this.UUID = `CORESVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`;\n\n        this.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n\n    static isFableService = true;\n\n\t// After fable is initialized, it would be expected to be wired in as a normal service.\n\tconnectFable(pFable)\n\t{\n\t\tthis.fable = pFable;\n\n\t\treturn true;\n\t}\n}\n\nmodule.exports = FableCoreServiceProviderBase;\n\n},{}],2:[function(require,module,exports){\n/**\n* Fable Service Base\n* @license MIT\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tthis.fable = pFable;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n        this.serviceType = 'Unknown';\n\n        this.UUID = pFable.getUUID();\n\n        this.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n    static isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\nmodule.exports.CoreServiceProviderBase = require('./Fable-ServiceProviderBase-Preinit.js');\n},{\"./Fable-ServiceProviderBase-Preinit.js\":1}],3:[function(require,module,exports){\n/**\n* @license MIT\n* @author <steven@velozo.com>\n*/\n\n/**\n* DataArithmatic browser shim loader\n*/\n\n// Load the data arithmatic module into the browser global automatically.\nvar libDataArithmatic = require('./DataArithmatic.js');\n\nif (typeof(window) === 'object') window.DataArithmatic = libDataArithmatic;\n\nmodule.exports = libDataArithmatic;\n},{\"./DataArithmatic.js\":4}],4:[function(require,module,exports){\n/**\n* @license MIT\n*/\n\nconst libFableServiceProviderBase = require('fable-serviceproviderbase').CoreServiceProviderBase;0\n/**\n* Data Arithmatic\n*\n* @class DataArithmatic\n*/\nclass DataArithmatic extends libFableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tsuper(pFable, pOptions, pServiceHash)\n\n\t\tthis.serviceType = 'DataArithmatic';\n\n\t\t// Regular Expressions (so they don't have to be recompiled every time)\n\t\t// These could be defined as static, but I'm not sure if that will work with browserify ... and specifically the QT browser.\n\t\tthis._Regex_formatterInsertCommas = /.{1,3}/g;\n\t\t// Match Function:\n\t\t// function(pMatch, pSign, pZeros, pBefore, pDecimal, pAfter)\n\t\t// Thoughts about below:   /^([+-]?)(0*)(\\d+)(\\.(\\d+))?$/;\n\t\tthis._Regex_formatterAddCommasToNumber = /^([-+]?)(0?)(\\d+)(.?)(\\d+)$/g;\n\t\tthis._Regex_formatterDollarsRemoveCommas = /,/gi;\n\t\tthis._Regex_formatterCleanNonAlpha = /[^a-z0-9]/gi;\n\n\t\t// TODO: Potentially pull these in from a configuration.\n\t\t// TODO: Use locale data for this if it's defaults all the way down.\n\t\tthis._Value_MoneySign_Currency = '$';\n\t\tthis._Value_NaN_Currency = '--';\n\t\tthis._Value_GroupSeparator_Number = ',';\n\n\t\tthis._Value_Prefix_StringHash = 'HSH';\n\t\tthis._Value_Clean_formatterCleanNonAlpha = '_';\n\n\t\tthis._UseEngineStringStartsWith = (typeof(String.prototype.startsWith) === 'function');\n\t\tthis._UseEngineStringEndsWith = (typeof(String.prototype.endsWith) === 'function');\n\t}\n\n\n\t/*************************************************************************\n\t * String Manipulation and Comparison Functions\n\t *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n\n\t/**\n\t * Reverse a string\n\t *\n\t * @param {string} pString - The string to reverse\n\t * @returns {string}\n\t */\n\tstringReverse (pString)\n\t{\n\t\t// TODO: Benchmark if there are faster ways we want to do this with all the newer JS stuff\n\t\t//       ... and if it will work with browserify in a clean way.\n\t    return pString.split('').reverse().join('');\n\t}\n\n\t/**\n\t * Test if a string starts with a given substring.\n\t *\n\t * @param {*} pString\n\t * @param {*} pSearchString\n\t * @param {*} pStartIndex\n\t * @returns {*}\n\t */\n\tstringStartsWith (pString, pSearchString, pStartIndex)\n\t{\n\t\tif (this._UseEngineStringStartsWith)\n\t\t{\n\t\t\treturn pString.startsWith(pSearchString, pStartIndex);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.stringStartsWith_Polyfill.call(pString, pSearchString, pStartIndex);\n\t\t}\n\t}\n\n\t/**\n\t * Check if a string starts with a given substring.  This is a safe polyfill for the ES6 string.startsWith() function.\n\t *\n\t * @param {*} pSearchString - The string to search for\n\t * @param {*} pStartIndex - The index to start the search at\n\t * @returns {boolean}\n\t */\n\tstringStartsWith_Polyfill (pSearchString, pStartIndex)\n\t{\n\t\treturn this.slice(pStartIndex || 0, pSearchString.length) === pSearchString;\n\t}\n\n\t/**\n\t * Test if a string starts with a given substring.\n\t *\n\t * @param {*} pString\n\t * @param {*} pSearchString\n\t * @param {*} pEndIndex\n\t * @returns {*}\n\t */\n\tstringEndsWith (pString, pSearchString, pEndIndex)\n\t{\n\t\tif (this._UseEngineStringEndsWith)\n\t\t{\n\t\t\treturn pString.endsWith(pSearchString, pEndIndex);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.stringEndsWith_Polyfill.call(pString, pSearchString, pEndIndex);\n\t\t}\n\t}\n\n\t/**\n\t * Check if a string starts with a given substring.  This is a safe polyfill for the ES6 string.startsWith() function.\n\t *\n\t * @param {*} pSearchString - The string to search for\n\t * @param {*} pEndIndex - The index to end the search at\n\t * @returns {boolean}\n\t */\n\tstringEndsWith_Polyfill (pSearchString, pEndIndex)\n\t{\n\t\t// This works much better than >= because\n\t\t// it compensates for NaN:\n\t\tif (!(pEndIndex < this.length))\n\t\t{\n\t\t\tpEndIndex = this.length;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpEndIndex |= 0; // round position\n\t\t}\n\t\treturn this.substr(pEndIndex - pSearchString.length, pSearchString.length) === pSearchString;\n\t}\n\n\t/**\n\t * Generate an insecure string hash.  Not meant to be secure, just a quick way to generate a hash for a string.  This is not a cryptographic hash.  Additional warranty and disclaimer ... this is not for passwords!\n\t *\n\t * @param {string} pString\n\t * @returns {string}\n\t */\n\tinsecureStringHash (pString)\n\t{\n\t    let tmpHash = 0;\n\t    let tmpStringLength = pString.length;\n\t    let tmpCharacterIndex = 0;\n\n\t    while (tmpCharacterIndex < tmpStringLength)\n\t    {\n\t        tmpHash = (tmpHash << 5) - tmpHash + pString.charCodeAt(tmpCharacterIndex++) | 0;\n\t    }\n\n\t    return `${this._Value_Prefix_StringHash}${tmpHash}`;\n\t}\n\n\t/**\n\t * Clean wrapping characters if they exist consistently around the string.  If they do not, the string is returned unchanged.\n\t *\n\t * @param {string} pWrapCharacter - The character expected as the wrapping character\n\t * @param {string} pString - the string to clean\n\t * @returns {string}\n\t */\n\tcleanEnclosureWrapCharacters (pWrapCharacter, pString)\n\t{\n\t\t// # Use case from ManyFest DSL:\n\t\t//\n\t\t// When a boxed property is passed in, it should have quotes of some\n\t\t// kind around it.\n\t\t//\n\t\t// For instance:\n\t\t// \t\tMyValues['Name']\n\t\t// \t\tMyValues[\"Age\"]\n\t\t// \t\tMyValues[`Cost`]\n\t\t//\n\t\t// This function is necessary to remove the wrapping quotes before object\n\t\t// resolution can occur.\n\t\tif (pString.startsWith(pWrapCharacter) && pString.endsWith(pWrapCharacter))\n\t\t{\n\t\t\treturn pString.substring(1, pString.length - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn pString;\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {*} pString\n\t * @returns\n\t */\n\tcleanNonAlphaCharacters (pString)\n\t{\n\t    if ((typeof(pString) == 'string') && (pString != ''))\n\t    {\n\t        return pString.replace(this._Regex_formatterCleanNonAlpha, this._Value_Clean_formatterCleanNonAlpha);\n\t    }\n\t}\n\n\n\t/*************************************************************************\n\t * Number Formatting Functions\n\t *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n\n\t/**\n\t * Insert commas every 3 characters from the right.  Used by formatterAddCommasToNumber().\n\t *\n\t * @param {*} pString\n\t * @returns {*}\n\t */\n\tformatterInsertCommas (pString)\n\t{\n\t    // Reverse, because it's easier to do things from the left, given arbitrary digit counts\n\t    let tmpReversed = this.stringReverse(pString);\n\t    // Add commas every three characters\n\t    let tmpReversedWithCommas = tmpReversed.match(this._Regex_formatterInsertCommas).join(',');\n\t    // Reverse again (back to normal direction)\n\t    return this.stringReverse(tmpReversedWithCommas);\n\t}\n\n\tprocessAddCommasToNumberRegex(pMatch, pSign, pZeros, pBefore, pDecimal, pAfter)\n\t{\n\t\t// If there was no decimal, the last capture grabs the final digit, so\n\t\t// we have to put it back together with the 'before' substring\n\t\treturn pSign + (pDecimal ? this.formatterInsertCommas(pBefore) + pDecimal + pAfter : this.formatterInsertCommas(pBefore + pAfter));\n\t}\n\n\t/**\n\t * Add Commas to a Number for readability.\n\t *\n\t * @param {*} pNumber\n\t * @returns {string}\n\t */\n\tformatterAddCommasToNumber (pNumber)\n\t{\n\t    // If the regex doesn't match, `replace` returns the string unmodified\n\t    return (pNumber.toString()).replace\n\t    (\n\t\t\tthis._Regex_formatterAddCommasToNumber,\n\t        this.processAddCommasToNumberRegex.bind(this)\n\t    );\n\t}\n\n\t/**\n\t * This will take a number and format it as a dollar string.  It will also add commas to the number.  If the number is not a number, it will return '--'.\n\t *\n\t * @param {*} pValue\n\t * @returns {string}\n\t */\n\tformatterDollars (pValue)\n\t{\n\t    let tmpDollarAmount = parseFloat(pValue).toFixed(2);\n\n\t    if (isNaN(tmpDollarAmount))\n\t    {\n\t        // Try again and see if what was passed in was a dollars string.\n\t        if (typeof(pValue) == 'string')\n\t        {\n\t\t\t\t// TODO: Better rounding function?  This is a hack to get rid of the currency symbol and commas.\n\t            tmpDollarAmount = parseFloat(pValue.replace(this._Value_MoneySign_Currency,'').replace(this._Regex_formatterDollarsRemoveCommas,'')).toFixed(2);\n\t        }\n\t\t\t// If we didn't get a number, return the \"not a number\" string.\n\t        if (isNaN(tmpDollarAmount))\n\t        {\n\t            return this._Value_NaN_Currency;\n\t        }\n\t    }\n\n\t    // TODO: Get locale data and use that for this stuff.\n\t    return `$${this.formatterAddCommasToNumber(tmpDollarAmount)}`;\n\t}\n\n\t/**\n\t * Round a number to a certain number of digits.  If the number is not a number, it will return 0.  If no digits are specified, it will default to 2 significant digits.\n\t *\n\t * @param {*} pValue\n\t * @param {number} pDigits\n\t * @returns {string}\n\t */\n\tformatterRoundNumber (pValue, pDigits)\n\t{\n\t    let tmpDigits = (typeof(pDigits) == 'undefined') ? 2 : pDigits;\n\n\t    let tmpValue = parseFloat(pValue).toFixed(tmpDigits);\n\t    if (isNaN(tmpValue))\n\t    {\n\t        let tmpZed = 0;\n\t        return tmpZed.toFixed(tmpDigits);\n\t    }\n\t    else\n\t    {\n\t        return tmpValue;\n\t    }\n\t}\n\n\n\t/**\n\t * Generate a reapeating padding string to be appended before or after depending on \n\t * which padding function it uses.\n\t *\n\t * @param {*} pString\n\t * @param {number} pTargetLength\n\t * @returns {string} pPadString\n\t */\n\tstringGeneratePaddingString(pString, pTargetLength, pPadString)\n\t{\n\t    let tmpTargetLength = pTargetLength >> 0;\n\t    let tmpPadString = String((typeof pPadString !== 'undefined' ? pPadString : ' '));\n\t    if (pString.length > pTargetLength)\n\t    {\n\t    \t// No padding string if the source string is already longer than the target length, return an empty string\n\t        return '';\n\t    }\n\t    else\n\t    {\n\t        let tmpPadLength = pTargetLength - pString.length;\n\t        if (tmpPadLength > pPadString.length)\n\t        {\n\t            pPadString += pPadString.repeat(tmpTargetLength / pPadString.length);\n\t        }\n\t        return pPadString.slice(0,tmpPadLength);\n\t    }\n\t}\n\n\t/**\n\t * Pad the start of a string.\n\t *\n\t * @param {*} pString\n\t * @param {number} pTargetLength\n\t * @returns {string} pPadString\n\t */\n\tstringPadStart = function(pString, pTargetLength, pPadString)\n\t{\n\t    let tmpString = pString.toString();\n        return this.stringGeneratePaddingString(tmpString, pTargetLength, pPadString) + tmpString;\n\t}\n\n\t/**\n\t * Pad the end of a string.\n\t *\n\t * @param {*} pString\n\t * @param {number} pTargetLength\n\t * @returns {string} pPadString\n\t */\n\tstringPadEnd = function(pString, pTargetLength, pPadString)\n\t{\n\t    let tmpString = pString.toString();\n        return tmpString + this.stringGeneratePaddingString(tmpString, pTargetLength, pPadString);\n\t}\n\n\n\t/*************************************************************************\n\t * String Tokenization Functions\n\t *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n\n\t/**\n\t * Return the string before the matched substring.\n\t *\n\t * If the substring is not found, the entire string is returned.  This only deals with the *first* match.\n\t *\n\t * @param {string} pString\n\t * @param {string} pMatch\n\t * @returns {string}\n\t */\n\tstringBeforeMatch (pString, pMatch)\n\t{\n\t\treturn pString.split(pMatch)[0];\n\t}\n\n\t/**\n\t * Return the string after the matched substring.\n\t *\n\t * If the substring is not found, an empty string is returned.  This only deals with the *first* match.\n\t *\n\t * @param {string} pString\n\t * @param {string} pMatch\n\t * @returns {string}\n\t */\n\tstringAfterMatch (pString, pMatch)\n\t{\n\t    let tmpStringSplitLocation = pString.indexOf(pMatch);\n\n\t\tif ((tmpStringSplitLocation < 0) || ((tmpStringSplitLocation + pMatch.length) >= pString.length))\n\t    {\n\t        return '';\n\t    }\n\n\t    return pString.substring(tmpStringSplitLocation + pMatch.length);\n\t}\n\n\t/**\n\t * Count the number of enclosures in a string based on the start and end characters.\n\t *\n\t * If no start or end characters are specified, it will default to parentheses.  If the string is not a string, it will return 0.\n\t *\n\t * @param {string} pString\n\t * @param {string} pEnclosureStart\n\t * @param {string} pEnclosureEnd\n\t * @returns the count of full in the string\n\t */\n\tstringCountEnclosures (pString, pEnclosureStart, pEnclosureEnd)\n\t{\n\t    let tmpString = (typeof(pString) == 'string') ? pString : '';\n\t    let tmpEnclosureStart = (typeof(pEnclosureStart) == 'string') ? pEnclosureStart : '(';\n\t    let tmpEnclosureEnd = (typeof(pEnclosureEnd) == 'string') ? pEnclosureEnd : ')';\n\n\t    let tmpEnclosureCount = 0;\n\t    let tmpEnclosureDepth = 0;\n\t    for (let i = 0; i < tmpString.length; i++)\n\t    {\n\t        // This is the start of an enclosure\n\t        if (tmpString[i] == tmpEnclosureStart)\n\t        {\n\t            if (tmpEnclosureDepth == 0)\n\t            {\n\t                tmpEnclosureCount++;\n\t            }\n\t            tmpEnclosureDepth++;\n\t        }\n\t        else if (tmpString[i] == tmpEnclosureEnd)\n\t        {\n\t            tmpEnclosureDepth--;\n\t        }\n\t    }\n\n\t    return tmpEnclosureCount;\n\t}\n\n\n\t/**\n\t * Get the value of the enclosure at the specified index.\n\t *\n\t * If the index is not a number, it will default to 0.  If the string is not a string, it will return an empty string.  If the enclosure is not found, it will return an empty string.  If the enclosure\n\t *\n\t * @param {string} pString\n\t * @param {number} pEnclosureIndexToGet\n\t * @param {string} pEnclosureStart\n\t * @param {string}} pEnclosureEnd\n\t * @returns {string}\n\t */\n\tstringGetEnclosureValueByIndex (pString, pEnclosureIndexToGet, pEnclosureStart, pEnclosureEnd)\n\t{\n\t    let tmpString = (typeof(pString) == 'string') ? pString : '';\n\t    let tmpEnclosureIndexToGet = (typeof(pEnclosureIndexToGet) == 'number') ? pEnclosureIndexToGet : 0;\n\t    let tmpEnclosureStart = (typeof(pEnclosureStart) == 'string') ? pEnclosureStart : '(';\n\t    let tmpEnclosureEnd = (typeof(pEnclosureEnd) == 'string') ? pEnclosureEnd : ')';\n\n\t    let tmpEnclosureCount = 0;\n\t    let tmpEnclosureDepth = 0;\n\n\t\tlet tmpMatchedEnclosureIndex = false;\n\t    let tmpEnclosedValueStartIndex = 0;\n\t    let tmpEnclosedValueEndIndex = 0;\n\n\t    for (let i = 0; i < tmpString.length; i++)\n\t    {\n\t        // This is the start of an enclosure\n\t        if (tmpString[i] == tmpEnclosureStart)\n\t        {\n\t            tmpEnclosureDepth++;\n\n\t\t\t\t// Only count enclosures at depth 1, but still this parses both pairs of all of them.\n\t\t\t\tif (tmpEnclosureDepth == 1)\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosureCount++;\n\t\t\t\t\tif (tmpEnclosureIndexToGet == (tmpEnclosureCount - 1))\n\t\t\t\t\t{\n\t\t\t\t\t\t// This is the start of *the* enclosure\n\t\t\t\t\t\ttmpMatchedEnclosureIndex = true;\n\t\t\t\t\t\ttmpEnclosedValueStartIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t        }\n\t\t\t// This is the end of an enclosure\n\t        else if (tmpString[i] == tmpEnclosureEnd)\n\t        {\n\t            tmpEnclosureDepth--;\n\n\t\t\t\t// Again, only count enclosures at depth 1, but still this parses both pairs of all of them.\n\t\t\t\tif ((tmpEnclosureDepth == 0) &&\n\t\t\t\t\ttmpMatchedEnclosureIndex &&\n\t\t\t\t\t(tmpEnclosedValueEndIndex <= tmpEnclosedValueStartIndex))\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosedValueEndIndex = i;\n\t\t\t\t\ttmpMatchedEnclosureIndex = false;\n\t\t\t\t}\n\t        }\n\t    }\n\n\t    if (tmpEnclosureCount <= tmpEnclosureIndexToGet)\n\t    {\n\t\t\t// Return an empty string if the enclosure is not found\n\t        return '';\n\t    }\n\n\t    if ((tmpEnclosedValueEndIndex > 0) && (tmpEnclosedValueEndIndex > tmpEnclosedValueStartIndex))\n\t    {\n\t        return tmpString.substring(tmpEnclosedValueStartIndex+1, tmpEnclosedValueEndIndex);\n\t    }\n\t    else\n\t    {\n\t        return tmpString.substring(tmpEnclosedValueStartIndex+1);\n\t    }\n\t}\n\n\n\t/**\n\t * Remove an enclosure from a string based on the index of the enclosure.\n\t *\n\t * @param {string} pString\n\t * @param {number} pEnclosureIndexToRemove\n\t * @param {number} pEnclosureStart\n\t * @param {number} pEnclosureEnd\n\t * @returns {string}\n\t */\n\tstringRemoveEnclosureByIndex (pString, pEnclosureIndexToRemove, pEnclosureStart, pEnclosureEnd)\n\t{\n\t    let tmpString = (typeof(pString) == 'string') ? pString : '';\n\t    let tmpEnclosureIndexToRemove = (typeof(pEnclosureIndexToRemove) == 'number') ? pEnclosureIndexToRemove : 0;\n\t    let tmpEnclosureStart = (typeof(pEnclosureStart) == 'string') ? pEnclosureStart : '(';\n\t    let tmpEnclosureEnd = (typeof(pEnclosureEnd) == 'string') ? pEnclosureEnd : ')';\n\n\t    let tmpEnclosureCount = 0;\n\t    let tmpEnclosureDepth = 0;\n\n\t\tlet tmpMatchedEnclosureIndex = false;\n\t    let tmpEnclosureStartIndex = 0;\n\t    let tmpEnclosureEndIndex = 0;\n\n\t    for (let i = 0; i < tmpString.length; i++)\n\t    {\n\t        // This is the start of an enclosure\n\t        if (tmpString[i] == tmpEnclosureStart)\n\t        {\n\t            tmpEnclosureDepth++;\n\n\t            if (tmpEnclosureDepth == 1)\n\t            {\n\t                tmpEnclosureCount++;\n\t\t\t\t\tif (tmpEnclosureIndexToRemove == (tmpEnclosureCount - 1))\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpMatchedEnclosureIndex = true;\n\t\t\t\t\t\ttmpEnclosureStartIndex = i;\n\t\t\t\t\t}\n\t            }\n\t        }\n\t        else if (tmpString[i] == tmpEnclosureEnd)\n\t        {\n\t            tmpEnclosureDepth--;\n\n\t\t\t\tif ((tmpEnclosureDepth == 0) &&\n\t\t\t\t\ttmpMatchedEnclosureIndex &&\n\t\t\t\t\t(tmpEnclosureEndIndex <= tmpEnclosureStartIndex))\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosureEndIndex = i;\n\t\t\t\t\ttmpMatchedEnclosureIndex = false;\n\t\t\t\t}\n\t        }\n\t    }\n\n\t    if (tmpEnclosureCount <= tmpEnclosureIndexToRemove)\n\t    {\n\t        return tmpString;\n\t    }\n\n\t    let tmpReturnString = '';\n\n\t    if (tmpEnclosureStartIndex > 1)\n\t    {\n\t        tmpReturnString = tmpString.substring(0, tmpEnclosureStartIndex);\n\t    }\n\n\t    if ((tmpString.length > (tmpEnclosureEndIndex + 1)) && (tmpEnclosureEndIndex > tmpEnclosureStartIndex))\n\t    {\n\t        tmpReturnString += tmpString.substring(tmpEnclosureEndIndex+1);\n\t    }\n\n\t    return tmpReturnString;\n\t}\n}\n\nmodule.exports = DataArithmatic;\n},{\"fable-serviceproviderbase\":2}]},{},[3])(3)\n});\n\n","/**\n* Fable Service Base\n* @license MIT\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tthis.fable = pFable;\n\n\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions : {};\n\n        this.serviceType = 'Unknown';\n\n        this.UUID = pFable.getUUID();\n\n        this.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash : `${this.UUID}`;\n\t}\n\n    static isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\nmodule.exports.CoreServiceProviderBase = require('./Fable-ServiceProviderBase-Preinit.js');","/**\n* @license MIT\n* @author <steven@velozo.com>\n*/\n\n/**\n* DataArithmatic browser shim loader\n*/\n\n// Load the data arithmatic module into the browser global automatically.\nvar libDataArithmatic = require('./DataArithmatic.js');\n\nif (typeof(window) === 'object') window.DataArithmatic = libDataArithmatic;\n\nmodule.exports = libDataArithmatic;","/**\n* @license MIT\n*/\n\nconst libFableServiceProviderBase = require('fable-serviceproviderbase').CoreServiceProviderBase;0\n/**\n* Data Arithmatic\n*\n* @class DataArithmatic\n*/\nclass DataArithmatic extends libFableServiceProviderBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tsuper(pFable, pOptions, pServiceHash)\n\n\t\tthis.serviceType = 'DataArithmatic';\n\n\t\t// Regular Expressions (so they don't have to be recompiled every time)\n\t\t// These could be defined as static, but I'm not sure if that will work with browserify ... and specifically the QT browser.\n\t\tthis._Regex_formatterInsertCommas = /.{1,3}/g;\n\t\t// Match Function:\n\t\t// function(pMatch, pSign, pZeros, pBefore, pDecimal, pAfter)\n\t\t// Thoughts about below:   /^([+-]?)(0*)(\\d+)(\\.(\\d+))?$/;\n\t\tthis._Regex_formatterAddCommasToNumber = /^([-+]?)(0?)(\\d+)(.?)(\\d+)$/g;\n\t\tthis._Regex_formatterDollarsRemoveCommas = /,/gi;\n\t\tthis._Regex_formatterCleanNonAlpha = /[^a-z0-9]/gi;\n\n\t\t// TODO: Potentially pull these in from a configuration.\n\t\t// TODO: Use locale data for this if it's defaults all the way down.\n\t\tthis._Value_MoneySign_Currency = '$';\n\t\tthis._Value_NaN_Currency = '--';\n\t\tthis._Value_GroupSeparator_Number = ',';\n\n\t\tthis._Value_Prefix_StringHash = 'HSH';\n\t\tthis._Value_Clean_formatterCleanNonAlpha = '_';\n\n\t\tthis._UseEngineStringStartsWith = (typeof(String.prototype.startsWith) === 'function');\n\t\tthis._UseEngineStringEndsWith = (typeof(String.prototype.endsWith) === 'function');\n\t}\n\n\n\t/*************************************************************************\n\t * String Manipulation and Comparison Functions\n\t *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n\n\t/**\n\t * Reverse a string\n\t *\n\t * @param {string} pString - The string to reverse\n\t * @returns {string}\n\t */\n\tstringReverse (pString)\n\t{\n\t\t// TODO: Benchmark if there are faster ways we want to do this with all the newer JS stuff\n\t\t//       ... and if it will work with browserify in a clean way.\n\t    return pString.split('').reverse().join('');\n\t}\n\n\t/**\n\t * Test if a string starts with a given substring.\n\t *\n\t * @param {*} pString\n\t * @param {*} pSearchString\n\t * @param {*} pStartIndex\n\t * @returns {*}\n\t */\n\tstringStartsWith (pString, pSearchString, pStartIndex)\n\t{\n\t\tif (this._UseEngineStringStartsWith)\n\t\t{\n\t\t\treturn pString.startsWith(pSearchString, pStartIndex);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.stringStartsWith_Polyfill.call(pString, pSearchString, pStartIndex);\n\t\t}\n\t}\n\n\t/**\n\t * Check if a string starts with a given substring.  This is a safe polyfill for the ES6 string.startsWith() function.\n\t *\n\t * @param {*} pSearchString - The string to search for\n\t * @param {*} pStartIndex - The index to start the search at\n\t * @returns {boolean}\n\t */\n\tstringStartsWith_Polyfill (pSearchString, pStartIndex)\n\t{\n\t\treturn this.slice(pStartIndex || 0, pSearchString.length) === pSearchString;\n\t}\n\n\t/**\n\t * Test if a string starts with a given substring.\n\t *\n\t * @param {*} pString\n\t * @param {*} pSearchString\n\t * @param {*} pEndIndex\n\t * @returns {*}\n\t */\n\tstringEndsWith (pString, pSearchString, pEndIndex)\n\t{\n\t\tif (this._UseEngineStringEndsWith)\n\t\t{\n\t\t\treturn pString.endsWith(pSearchString, pEndIndex);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.stringEndsWith_Polyfill.call(pString, pSearchString, pEndIndex);\n\t\t}\n\t}\n\n\t/**\n\t * Check if a string starts with a given substring.  This is a safe polyfill for the ES6 string.startsWith() function.\n\t *\n\t * @param {*} pSearchString - The string to search for\n\t * @param {*} pEndIndex - The index to end the search at\n\t * @returns {boolean}\n\t */\n\tstringEndsWith_Polyfill (pSearchString, pEndIndex)\n\t{\n\t\t// This works much better than >= because\n\t\t// it compensates for NaN:\n\t\tif (!(pEndIndex < this.length))\n\t\t{\n\t\t\tpEndIndex = this.length;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpEndIndex |= 0; // round position\n\t\t}\n\t\treturn this.substr(pEndIndex - pSearchString.length, pSearchString.length) === pSearchString;\n\t}\n\n\t/**\n\t * Generate an insecure string hash.  Not meant to be secure, just a quick way to generate a hash for a string.  This is not a cryptographic hash.  Additional warranty and disclaimer ... this is not for passwords!\n\t *\n\t * @param {string} pString\n\t * @returns {string}\n\t */\n\tinsecureStringHash (pString)\n\t{\n\t    let tmpHash = 0;\n\t    let tmpStringLength = pString.length;\n\t    let tmpCharacterIndex = 0;\n\n\t    while (tmpCharacterIndex < tmpStringLength)\n\t    {\n\t        tmpHash = (tmpHash << 5) - tmpHash + pString.charCodeAt(tmpCharacterIndex++) | 0;\n\t    }\n\n\t    return `${this._Value_Prefix_StringHash}${tmpHash}`;\n\t}\n\n\t/**\n\t * Clean wrapping characters if they exist consistently around the string.  If they do not, the string is returned unchanged.\n\t *\n\t * @param {string} pWrapCharacter - The character expected as the wrapping character\n\t * @param {string} pString - the string to clean\n\t * @returns {string}\n\t */\n\tcleanEnclosureWrapCharacters (pWrapCharacter, pString)\n\t{\n\t\t// # Use case from ManyFest DSL:\n\t\t//\n\t\t// When a boxed property is passed in, it should have quotes of some\n\t\t// kind around it.\n\t\t//\n\t\t// For instance:\n\t\t// \t\tMyValues['Name']\n\t\t// \t\tMyValues[\"Age\"]\n\t\t// \t\tMyValues[`Cost`]\n\t\t//\n\t\t// This function is necessary to remove the wrapping quotes before object\n\t\t// resolution can occur.\n\t\tif (pString.startsWith(pWrapCharacter) && pString.endsWith(pWrapCharacter))\n\t\t{\n\t\t\treturn pString.substring(1, pString.length - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn pString;\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {*} pString\n\t * @returns\n\t */\n\tcleanNonAlphaCharacters (pString)\n\t{\n\t    if ((typeof(pString) == 'string') && (pString != ''))\n\t    {\n\t        return pString.replace(this._Regex_formatterCleanNonAlpha, this._Value_Clean_formatterCleanNonAlpha);\n\t    }\n\t}\n\n\n\t/*************************************************************************\n\t * Number Formatting Functions\n\t *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n\n\t/**\n\t * Insert commas every 3 characters from the right.  Used by formatterAddCommasToNumber().\n\t *\n\t * @param {*} pString\n\t * @returns {*}\n\t */\n\tformatterInsertCommas (pString)\n\t{\n\t    // Reverse, because it's easier to do things from the left, given arbitrary digit counts\n\t    let tmpReversed = this.stringReverse(pString);\n\t    // Add commas every three characters\n\t    let tmpReversedWithCommas = tmpReversed.match(this._Regex_formatterInsertCommas).join(',');\n\t    // Reverse again (back to normal direction)\n\t    return this.stringReverse(tmpReversedWithCommas);\n\t}\n\n\tprocessAddCommasToNumberRegex(pMatch, pSign, pZeros, pBefore, pDecimal, pAfter)\n\t{\n\t\t// If there was no decimal, the last capture grabs the final digit, so\n\t\t// we have to put it back together with the 'before' substring\n\t\treturn pSign + (pDecimal ? this.formatterInsertCommas(pBefore) + pDecimal + pAfter : this.formatterInsertCommas(pBefore + pAfter));\n\t}\n\n\t/**\n\t * Add Commas to a Number for readability.\n\t *\n\t * @param {*} pNumber\n\t * @returns {string}\n\t */\n\tformatterAddCommasToNumber (pNumber)\n\t{\n\t    // If the regex doesn't match, `replace` returns the string unmodified\n\t    return (pNumber.toString()).replace\n\t    (\n\t\t\tthis._Regex_formatterAddCommasToNumber,\n\t        this.processAddCommasToNumberRegex.bind(this)\n\t    );\n\t}\n\n\t/**\n\t * This will take a number and format it as a dollar string.  It will also add commas to the number.  If the number is not a number, it will return '--'.\n\t *\n\t * @param {*} pValue\n\t * @returns {string}\n\t */\n\tformatterDollars (pValue)\n\t{\n\t    let tmpDollarAmount = parseFloat(pValue).toFixed(2);\n\n\t    if (isNaN(tmpDollarAmount))\n\t    {\n\t        // Try again and see if what was passed in was a dollars string.\n\t        if (typeof(pValue) == 'string')\n\t        {\n\t\t\t\t// TODO: Better rounding function?  This is a hack to get rid of the currency symbol and commas.\n\t            tmpDollarAmount = parseFloat(pValue.replace(this._Value_MoneySign_Currency,'').replace(this._Regex_formatterDollarsRemoveCommas,'')).toFixed(2);\n\t        }\n\t\t\t// If we didn't get a number, return the \"not a number\" string.\n\t        if (isNaN(tmpDollarAmount))\n\t        {\n\t            return this._Value_NaN_Currency;\n\t        }\n\t    }\n\n\t    // TODO: Get locale data and use that for this stuff.\n\t    return `$${this.formatterAddCommasToNumber(tmpDollarAmount)}`;\n\t}\n\n\t/**\n\t * Round a number to a certain number of digits.  If the number is not a number, it will return 0.  If no digits are specified, it will default to 2 significant digits.\n\t *\n\t * @param {*} pValue\n\t * @param {number} pDigits\n\t * @returns {string}\n\t */\n\tformatterRoundNumber (pValue, pDigits)\n\t{\n\t    let tmpDigits = (typeof(pDigits) == 'undefined') ? 2 : pDigits;\n\n\t    let tmpValue = parseFloat(pValue).toFixed(tmpDigits);\n\t    if (isNaN(tmpValue))\n\t    {\n\t        let tmpZed = 0;\n\t        return tmpZed.toFixed(tmpDigits);\n\t    }\n\t    else\n\t    {\n\t        return tmpValue;\n\t    }\n\t}\n\n\n\t/**\n\t * Generate a reapeating padding string to be appended before or after depending on \n\t * which padding function it uses.\n\t *\n\t * @param {*} pString\n\t * @param {number} pTargetLength\n\t * @returns {string} pPadString\n\t */\n\tstringGeneratePaddingString(pString, pTargetLength, pPadString)\n\t{\n\t    let tmpTargetLength = pTargetLength >> 0;\n\t    let tmpPadString = String((typeof pPadString !== 'undefined' ? pPadString : ' '));\n\t    if (pString.length > pTargetLength)\n\t    {\n\t    \t// No padding string if the source string is already longer than the target length, return an empty string\n\t        return '';\n\t    }\n\t    else\n\t    {\n\t        let tmpPadLength = pTargetLength - pString.length;\n\t        if (tmpPadLength > pPadString.length)\n\t        {\n\t            pPadString += pPadString.repeat(tmpTargetLength / pPadString.length);\n\t        }\n\t        return pPadString.slice(0,tmpPadLength);\n\t    }\n\t}\n\n\t/**\n\t * Pad the start of a string.\n\t *\n\t * @param {*} pString\n\t * @param {number} pTargetLength\n\t * @returns {string} pPadString\n\t */\n\tstringPadStart = function(pString, pTargetLength, pPadString)\n\t{\n\t    let tmpString = pString.toString();\n        return this.stringGeneratePaddingString(tmpString, pTargetLength, pPadString) + tmpString;\n\t}\n\n\t/**\n\t * Pad the end of a string.\n\t *\n\t * @param {*} pString\n\t * @param {number} pTargetLength\n\t * @returns {string} pPadString\n\t */\n\tstringPadEnd = function(pString, pTargetLength, pPadString)\n\t{\n\t    let tmpString = pString.toString();\n        return tmpString + this.stringGeneratePaddingString(tmpString, pTargetLength, pPadString);\n\t}\n\n\n\t/*************************************************************************\n\t * String Tokenization Functions\n\t *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n\n\t/**\n\t * Return the string before the matched substring.\n\t *\n\t * If the substring is not found, the entire string is returned.  This only deals with the *first* match.\n\t *\n\t * @param {string} pString\n\t * @param {string} pMatch\n\t * @returns {string}\n\t */\n\tstringBeforeMatch (pString, pMatch)\n\t{\n\t\treturn pString.split(pMatch)[0];\n\t}\n\n\t/**\n\t * Return the string after the matched substring.\n\t *\n\t * If the substring is not found, an empty string is returned.  This only deals with the *first* match.\n\t *\n\t * @param {string} pString\n\t * @param {string} pMatch\n\t * @returns {string}\n\t */\n\tstringAfterMatch (pString, pMatch)\n\t{\n\t    let tmpStringSplitLocation = pString.indexOf(pMatch);\n\n\t\tif ((tmpStringSplitLocation < 0) || ((tmpStringSplitLocation + pMatch.length) >= pString.length))\n\t    {\n\t        return '';\n\t    }\n\n\t    return pString.substring(tmpStringSplitLocation + pMatch.length);\n\t}\n\n\t/**\n\t * Count the number of enclosures in a string based on the start and end characters.\n\t *\n\t * If no start or end characters are specified, it will default to parentheses.  If the string is not a string, it will return 0.\n\t *\n\t * @param {string} pString\n\t * @param {string} pEnclosureStart\n\t * @param {string} pEnclosureEnd\n\t * @returns the count of full in the string\n\t */\n\tstringCountEnclosures (pString, pEnclosureStart, pEnclosureEnd)\n\t{\n\t    let tmpString = (typeof(pString) == 'string') ? pString : '';\n\t    let tmpEnclosureStart = (typeof(pEnclosureStart) == 'string') ? pEnclosureStart : '(';\n\t    let tmpEnclosureEnd = (typeof(pEnclosureEnd) == 'string') ? pEnclosureEnd : ')';\n\n\t    let tmpEnclosureCount = 0;\n\t    let tmpEnclosureDepth = 0;\n\t    for (let i = 0; i < tmpString.length; i++)\n\t    {\n\t        // This is the start of an enclosure\n\t        if (tmpString[i] == tmpEnclosureStart)\n\t        {\n\t            if (tmpEnclosureDepth == 0)\n\t            {\n\t                tmpEnclosureCount++;\n\t            }\n\t            tmpEnclosureDepth++;\n\t        }\n\t        else if (tmpString[i] == tmpEnclosureEnd)\n\t        {\n\t            tmpEnclosureDepth--;\n\t        }\n\t    }\n\n\t    return tmpEnclosureCount;\n\t}\n\n\n\t/**\n\t * Get the value of the enclosure at the specified index.\n\t *\n\t * If the index is not a number, it will default to 0.  If the string is not a string, it will return an empty string.  If the enclosure is not found, it will return an empty string.  If the enclosure\n\t *\n\t * @param {string} pString\n\t * @param {number} pEnclosureIndexToGet\n\t * @param {string} pEnclosureStart\n\t * @param {string}} pEnclosureEnd\n\t * @returns {string}\n\t */\n\tstringGetEnclosureValueByIndex (pString, pEnclosureIndexToGet, pEnclosureStart, pEnclosureEnd)\n\t{\n\t    let tmpString = (typeof(pString) == 'string') ? pString : '';\n\t    let tmpEnclosureIndexToGet = (typeof(pEnclosureIndexToGet) == 'number') ? pEnclosureIndexToGet : 0;\n\t    let tmpEnclosureStart = (typeof(pEnclosureStart) == 'string') ? pEnclosureStart : '(';\n\t    let tmpEnclosureEnd = (typeof(pEnclosureEnd) == 'string') ? pEnclosureEnd : ')';\n\n\t    let tmpEnclosureCount = 0;\n\t    let tmpEnclosureDepth = 0;\n\n\t\tlet tmpMatchedEnclosureIndex = false;\n\t    let tmpEnclosedValueStartIndex = 0;\n\t    let tmpEnclosedValueEndIndex = 0;\n\n\t    for (let i = 0; i < tmpString.length; i++)\n\t    {\n\t        // This is the start of an enclosure\n\t        if (tmpString[i] == tmpEnclosureStart)\n\t        {\n\t            tmpEnclosureDepth++;\n\n\t\t\t\t// Only count enclosures at depth 1, but still this parses both pairs of all of them.\n\t\t\t\tif (tmpEnclosureDepth == 1)\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosureCount++;\n\t\t\t\t\tif (tmpEnclosureIndexToGet == (tmpEnclosureCount - 1))\n\t\t\t\t\t{\n\t\t\t\t\t\t// This is the start of *the* enclosure\n\t\t\t\t\t\ttmpMatchedEnclosureIndex = true;\n\t\t\t\t\t\ttmpEnclosedValueStartIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t        }\n\t\t\t// This is the end of an enclosure\n\t        else if (tmpString[i] == tmpEnclosureEnd)\n\t        {\n\t            tmpEnclosureDepth--;\n\n\t\t\t\t// Again, only count enclosures at depth 1, but still this parses both pairs of all of them.\n\t\t\t\tif ((tmpEnclosureDepth == 0) &&\n\t\t\t\t\ttmpMatchedEnclosureIndex &&\n\t\t\t\t\t(tmpEnclosedValueEndIndex <= tmpEnclosedValueStartIndex))\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosedValueEndIndex = i;\n\t\t\t\t\ttmpMatchedEnclosureIndex = false;\n\t\t\t\t}\n\t        }\n\t    }\n\n\t    if (tmpEnclosureCount <= tmpEnclosureIndexToGet)\n\t    {\n\t\t\t// Return an empty string if the enclosure is not found\n\t        return '';\n\t    }\n\n\t    if ((tmpEnclosedValueEndIndex > 0) && (tmpEnclosedValueEndIndex > tmpEnclosedValueStartIndex))\n\t    {\n\t        return tmpString.substring(tmpEnclosedValueStartIndex+1, tmpEnclosedValueEndIndex);\n\t    }\n\t    else\n\t    {\n\t        return tmpString.substring(tmpEnclosedValueStartIndex+1);\n\t    }\n\t}\n\n\n\t/**\n\t * Remove an enclosure from a string based on the index of the enclosure.\n\t *\n\t * @param {string} pString\n\t * @param {number} pEnclosureIndexToRemove\n\t * @param {number} pEnclosureStart\n\t * @param {number} pEnclosureEnd\n\t * @returns {string}\n\t */\n\tstringRemoveEnclosureByIndex (pString, pEnclosureIndexToRemove, pEnclosureStart, pEnclosureEnd)\n\t{\n\t    let tmpString = (typeof(pString) == 'string') ? pString : '';\n\t    let tmpEnclosureIndexToRemove = (typeof(pEnclosureIndexToRemove) == 'number') ? pEnclosureIndexToRemove : 0;\n\t    let tmpEnclosureStart = (typeof(pEnclosureStart) == 'string') ? pEnclosureStart : '(';\n\t    let tmpEnclosureEnd = (typeof(pEnclosureEnd) == 'string') ? pEnclosureEnd : ')';\n\n\t    let tmpEnclosureCount = 0;\n\t    let tmpEnclosureDepth = 0;\n\n\t\tlet tmpMatchedEnclosureIndex = false;\n\t    let tmpEnclosureStartIndex = 0;\n\t    let tmpEnclosureEndIndex = 0;\n\n\t    for (let i = 0; i < tmpString.length; i++)\n\t    {\n\t        // This is the start of an enclosure\n\t        if (tmpString[i] == tmpEnclosureStart)\n\t        {\n\t            tmpEnclosureDepth++;\n\n\t            if (tmpEnclosureDepth == 1)\n\t            {\n\t                tmpEnclosureCount++;\n\t\t\t\t\tif (tmpEnclosureIndexToRemove == (tmpEnclosureCount - 1))\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpMatchedEnclosureIndex = true;\n\t\t\t\t\t\ttmpEnclosureStartIndex = i;\n\t\t\t\t\t}\n\t            }\n\t        }\n\t        else if (tmpString[i] == tmpEnclosureEnd)\n\t        {\n\t            tmpEnclosureDepth--;\n\n\t\t\t\tif ((tmpEnclosureDepth == 0) &&\n\t\t\t\t\ttmpMatchedEnclosureIndex &&\n\t\t\t\t\t(tmpEnclosureEndIndex <= tmpEnclosureStartIndex))\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosureEndIndex = i;\n\t\t\t\t\ttmpMatchedEnclosureIndex = false;\n\t\t\t\t}\n\t        }\n\t    }\n\n\t    if (tmpEnclosureCount <= tmpEnclosureIndexToRemove)\n\t    {\n\t        return tmpString;\n\t    }\n\n\t    let tmpReturnString = '';\n\n\t    if (tmpEnclosureStartIndex > 1)\n\t    {\n\t        tmpReturnString = tmpString.substring(0, tmpEnclosureStartIndex);\n\t    }\n\n\t    if ((tmpString.length > (tmpEnclosureEndIndex + 1)) && (tmpEnclosureEndIndex > tmpEnclosureStartIndex))\n\t    {\n\t        tmpReturnString += tmpString.substring(tmpEnclosureEndIndex+1);\n\t    }\n\n\t    return tmpReturnString;\n\t}\n}\n\nmodule.exports = DataArithmatic;"]}